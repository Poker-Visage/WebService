		
##视图：
		数据库中存在多种对象，表和视图都是数据库中的对象，创建视图时名称不能和表名重名，视图实际上是代表了一段
	sql查询语句，可以理解成视图是一张虚拟的表，表中的数据会随着原表的改变而改变。
	##为什么使用视图：因为有些数据的查询需要书写大量的sql语句，每次书写比较麻烦，使用视图可以起到sql重用的作用。可以隐藏敏感信息 
	--创建视图的格式：
			create view 视图名 as 子查询	;
		--例如：（切换回db3数据库）
		create view v_emp_10 as(select*from emp where deptno=10);		
	--隐藏员工表的工资字段
	  create view v_emp_nosal as (select empon,ename,job,mgr,deptno from emp);	
	2.创建emp表每个部门工资的总和，平均工资，最大工资，最小工资的视图
		create view vs as(select sum(sal),avg(sal),max(sal),min(sal)from emp group by deptno);
##视图的分类
		1.简单的视图：创建视图的子查询中不包含：去重，函数，分组，关联查询的视图称为简单视图。   可以进行增删改操作
		2.复杂的视图：创建视图的子查询中包含：去重，函数，分组	
##在简单视图中进行增删改操作
		1.视图中插入数据
		insert into v_emp_10(empno,ename,deptno,sal) values(10001,'张三',10,3000);
	上边这种叫数据污染：往视图中插入一条视图中不显示，但是原表会显示的数据称为数据污染。			
	 
	 如果需要避免数据污染的出现，创建视图时需要使用with check option的关键字
	 insert into v_emp_10     as     (empno,ename,deptno,sal) values(10001,'张三',10,3000)with check option;
	 --测试
	 
	 --修改和删除只能操作视图中存在的数据
		##修改视图
				格式：create or replace view 视图 as 子查询
				create or replace view v_emp_10 as(select*from emp where deptno=10 and sal<2000);	
			##删除视图
					drop view v_emp_20;
					drop view if exists v_emp_20;如果存在删除不存在也不会报错
			##视图别名
					--如果创建视图的时候使用了别名，则对视图操作的时候只能使用别名
			   create view v_emp_name as(select ename name from emp);
			   update v_emp_name set name='abc' where name='李四';	
			##视图总结：
					1.视图是数据库的对象，代表一段sql语句
					2.作用：重用sql，隐藏敏感信息
					3.分类：简单（不包含：去重，函数，分组，关联查询）（可以进行增删改操作）和复杂（和简单相反）（只能查）
					4.工作中一般使用视图时只能进行查询操作，如果需要增删改查则直接对原表进行操作。
	##约束
			什么是约束：约束是对表字段数据的限制条件。
	##非空  not null
	--添加非空约束的字段 值不能为null
		create table t_null(id int,age int not null);
	##唯一  unique
			添加唯一约束的字段，值不能重复
				create table t_unique(id int,age int unique);
				insert into t_unique values(1,20);(成功)
				insert into t_unique values(2,20);(失败)
	###主键约束  primary key
			--添加了主键约束的字段，值不能为null也不能重复
			--创建表时添加主键约束
			create table t_pri(id int primary key); 
			--创建表后添加主键约束									
			create table t_pri2(id int);
			alter table t_pri2 add primary key(id);
			--一个表只能有一个主键
			--删除主键约束
					alter table t_pri2 drop primary key;
   ##默认约束   default
   --给字段设置默认值，当字段不赋值的时候，默认值生效
   		create table t_def(id int ,age int default 10);
   	##检查约束
   	     check
   	     mysql不支持，但语法不同不会报错
   	     create table t_check(id int,age int,check(age>10));
   	##外键约束
   	       --什么是外键约束：用来保证两张表之间数据的一致性和完整性的约束
   	       --添加约束后，外键的值可以为null，可以重复，但不能是另外一张表不存在的数据。
   	       外键指向的表不能先删除，如果需要删除，要么删除外键约束，要么先删除存在外键
   	       的表（emp）。外键的值通常指向另外一张表的主键
   	       --使用外键必须两张表使用相同的引擎（innodb），myisam不支持外键
   	       --工作中除非特殊情况，一般不使用外键约束，而是使用java代码通过逻辑
   	            对插入和删除的数据进行限制，因为加了外键约束后不方便测试
   	      ##添加外键约束的格式：
   	      			create table emp(id int,age int,deptid int,constraint 约束名
   	      			foreign key(deptid) references 关联表名（关联的字段名）); 
   	      		--创建部门和员工的两张表，创建一个db6数据库并使用	     
   	       
   	##索引
   			###导入数据
   					在终端中输入source命令，
   						source文件的绝对路径
   				桌面文件：source/home/soft01/桌面/item_backup.sql
   		什么是索引：索引是用来提高查询速度的技术，类似目录
   		    为什么使用索引：如果不使用索引，数据会零散的保存在磁盘块中（磁盘大小（4-8kb））查询
   	数据时需要挨个遍历每个磁盘块，直到找到数据为止，使用索引后会在磁盘中将数据以树状结构进行
   	保存，查询数据时从树状结构中进行查询，可以大大降低磁盘块的访问数量，从而提高查询速度。	    
    	索引需建立在大量数据的表中
   		    ##索引分类：
   		    		1.聚集索引：数据库会自动为添加了主键的表创建聚集索引
   		    		2.非聚集索引：树状结构中没有数据，保存的是磁盘块的地址
   		   ##如何创建索引（非聚集索引）
   		   		格式:create index 索引名 on 表名（字段名[(长度)]）;
   		   		create index index_title on item2(title); 
   		   		--创建索引之前先查询看时间
   		   				select*from item2 where title='100'; 		
   		    	##查看索引
   		    			show index from name;
   		    	##删除索引
   		    			drop index index_title on item2;		
   		    	##复合索引
   		    			创建索引的时候添加多个字段，这种索引称为复合索引
   		    		什么时候用：当频繁使用多个字段查
   		    		创建表时添加索引：
   		    			create table t_index(id int,age int,index index_age(age));
   		    	##索引总结：
   		    			1.索引会占磁盘空间，不是越多越好
   		    			2.数据量小不需要建
   		    			3.主键会创建聚集索引
   		    			4.对经常出现在where/order by/distinct后面的字段创建索引
   		    			      可以提高效率，效果更好
   		    			5.不要在修改太频繁的表中创建
   		    ##事务
   		    		数据库中执行sql语句的最小工作单元，不可拆分，同时成功或同时失败
   		    ##事务的ACID特性*****面试常考
   		    		Atomicity:原子性，最小，不可再次拆分
   		    		Consistency:一致性，同时成功，同时失败
   		    		Isolation：隔离性，多个事务之间互不影响
   		    		Durability:持久性，事务完成后数据持久保存到数据库
   		    ##mysql中事务的的指令
   		    1.查看自动提交的状态
   		    show variables like'%autocommit%';
   		    2.设置自动提交的状态
   		    		set autocommit=0/1;
   		    3.提交
   		    commit
   		    4.回滚
   		    rollback
   		    5.保存回滚点
   		    savepoint s1
   		    5.回滚到某个点
   		    rollback to s1；				
   		    					      
   		    													     						